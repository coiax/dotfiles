import pathlib

# Vox allows for virtual environments inside xonsh
xontrib load vox

# Standard global variables that we're always a fan of
HOME = pathlib.Path.home()

# Set to True to enable full tracebacks when Xonsh has issues
$XONSH_SHOW_TRACEBACK = False

# Use vim for everything
$EDITOR = 'vim'
$VISUAL = $EDITOR
$GIT_EDITOR = $EDITOR

# Add some common bin directories to the $PATH
$PATH = [HOME / ".local/bin", HOME / "bin"] + $PATH

# Print a random #pypy IRC topic at the start of pypy interactive mode
$PYPY_IRC_TOPIC = True

# Random colours for the hostnames, that depend on the hostname itself

def _hostname_colour():
    import random
    import platform

    r = random.Random()
    r.seed(platform.node())

    colour_index = r.randint(0, 6)
    colours = ["RED", "GREEN", "YELLOW", "BLUE", "PURPLE", "CYAN", "WHITE"]

    colour = colours[colour_index]

    is_bold = r.random() < 0.5
    if is_bold:
        colour = "BOLD_" + colour

    return "".join(("{", colour, "}"))


def _git_branch() -> str:
    """Using the `git branch` command, return the name of the current
    checked out branch. During a detached HEAD situation, can return
    "(HEAD detached at abcdef123)"
    """
    import subprocess
    cp = subprocess.run(
        ["git", "branch", "--no-color"],
        capture_output=True,
        encoding="utf-8"
    )
    if cp.returncode != 0:
        return ""

    branches = cp.stdout.strip().split("\n")
    for branch in branches:
        if branch.startswith("* "):
            return branch[2:]

    return ""


def _prompt():
    import subprocess
    from xonsh.prompt.gitstatus import gitstatus

    col = _hostname_colour()
    parts = [
        "{env_name:{}}{NO_COLOR}",
        "{user}@",
        col,
        "{hostname}{NO_COLOR}",
        ":{BOLD_BLUE}{cwd}{NO_COLOR}",
    ]

    try:
        gc = gitstatus()
    except subprocess.CalledProcessError:
        gc = None

    if gc is not None:
        dirty = gc.untracked or gc.changed or gc.deleted or gc.staged

        current_branch = _git_branch()

        if dirty:
            parts.append(f"[{current_branch}*]")
        else:
            parts.append(f"[{current_branch}]")

    parts.append("{prompt_end} ")
    return "".join(parts)


$PROMPT = _prompt

# Load .xonsh.local.py, if it exists
# The .py is required, otherwise xonsh thinks we're trying to load
# a non-xonsh file.

local_xonsh = HOME / ".xonshrc.local.py"

if local_xonsh.exists():
    source @(local_xonsh)

# vim: set ft=python:
